* >Natural Source Header 000000
* :Mode S
* :CP
* :LineIncrement 10
* <Natural Source Header
*** MODULE : OXO      - LIBRAIRIE : H18005LI - EDITE LE  16/12/92 ***
DEFINE DATA LOCAL
1 £BLK (A1/8,8)
1 £SAV (A1/8,8)
1 REDEFINE £SAV
  2 £SAV-LIG (A64)
1 £AFF (A1/10,10)
1 £CUR-LIG (P3,2)
1 £CUR-COL (P3,2)
1 £LIG (N2)
1 £COL (N2)
1 £POSIT-BOOL  (L)
1 £CERNEE-BOOL (L)
1 £AFFICH-BOOL (L)
1 £TROUVE-BOOL (L)
1 £ADV     (A1)
1 £MOI     (A1)
1 £DIR     (A1)
1 £MONTOUR (L)
1 £PTS-VOUS (N2)
1 £PTS-CPU  (N2)
1 £PION     (N2)
1 £PION-CUM (N2)
1 £LG       (N2)
1 £CO       (N2)
1 £J        (N2)
1 £MAX-PTS  (N2)
1 £MAX-IND  (N2)
*
1 £POS-CAS (N2,2/20)
1 £PTS-CAS (N2/20)
1 £SIM-NIV (A64/9,20)
1 £SIM-CAS (N2)
1 £NIV (N2)
1 £QUI (N1)
1 £TEXT (A20)
*
END-DEFINE
MOVE '.' TO £BLK(*,*)
MOVE 'X' TO £BLK(4,4) £BLK(5,5)
MOVE 'O' TO £BLK(5,4) £BLK(4,5)
MOVE '=' TO £AFF(1,*) £AFF(10,*) £AFF(*,1) £AFF(*,10)
MOVE £BLK(*,*) TO £AFF(2:9,2:9)
MOVE TRUE  TO £MONTOUR
MOVE FALSE TO £AFFICH-BOOL
MOVE 2 TO £PTS-VOUS £PTS-CPU
SET KEY ALL
REPEAT
  INPUT WITH TEXT £TEXT USING MAP 'OXO-M'
  IF *PF-KEY = 'PF3'
    STACK TOP 'LOGON SYSCNT2'
    ESCAPE BOTTOM
  END-IF
  IF *PF-KEY = 'PF4'
    MOVE FALSE TO £MONTOUR
  END-IF
  RESET £TEXT
  IF £MONTOUR
    COMPUTE £CUR-LIG = *CURS-LINE - 2
    COMPUTE £CUR-COL = (*CURS-COL  - 8) / 2
    MOVE FALSE TO £POSIT-BOOL
    PERFORM CONTROLES
    IF NOT £POSIT-BOOL
      REINPUT 'POSIT INVALIDE'
    END-IF
  ELSE /* SIM
    MOVE £BLK(*,*) TO £SAV(*,*)
    RESET £SIM-CAS
    RESET £POS-CAS(*)
    RESET £PTS-CAS(*)
    FOR £NIV = 1 TO 1
      FOR £CUR-LIG = 1 TO 8
        FOR £CUR-COL = 1 TO 8
          MOVE £BLK(*,*) TO £SAV(*,*)
          MOVE FALSE TO £AFFICH-BOOL
          MOVE FALSE TO £POSIT-BOOL
          PERFORM CONTROLES
          IF £POSIT-BOOL
            ADD 1 TO £SIM-CAS
            COMPUTE £POS-CAS(£SIM-CAS) = £CUR-LIG + £CUR-COL / 100
            MOVE £PION-CUM TO £PTS-CAS(£SIM-CAS)
          END-IF
        END-FOR
      END-FOR
    END-FOR
    MOVE £SAV(*,*) TO £BLK(*,*)
    RESET £MAX-PTS £MAX-IND
    FOR £SIM-CAS = 1 TO 20
      IF £PTS-CAS(£SIM-CAS) = 0
        ESCAPE BOTTOM
      END-IF
*
      IF £PTS-CAS(£SIM-CAS) > £MAX-PTS
        MOVE £SIM-CAS           TO £MAX-IND
        MOVE £PTS-CAS(£SIM-CAS) TO £MAX-PTS
      END-IF
    END-FOR
    IF £MAX-IND > 0
      COMPUTE £CUR-LIG = INT (£POS-CAS(£MAX-IND))
      COMPUTE £CUR-COL = FRAC(£POS-CAS(£MAX-IND)) * 100
    END-IF
  END-IF
  MOVE FALSE TO £POSIT-BOOL
  MOVE TRUE TO £AFFICH-BOOL
  PERFORM CONTROLES /* AVEC AFFICHAGE RESULTAT
  IF £TROUVE-BOOL
    IF £MONTOUR
      ADD £PION-CUM TO £PTS-VOUS
      ADD 1         TO £PTS-VOUS
      SUBTRACT £PION-CUM FROM £PTS-CPU
      MOVE FALSE TO £MONTOUR
      SET CONTROL 'N' /* EXPERIMENTAL
    ELSE
      ADD £PION-CUM TO £PTS-CPU
      ADD 1         TO £PTS-CPU
      SUBTRACT £PION-CUM FROM £PTS-VOUS
      MOVE TRUE TO £MONTOUR
    END-IF
  ELSE
    IF £MONTOUR
      MOVE    'VOUS PASSEZ' TO £TEXT
      MOVE FALSE TO £MONTOUR
    ELSE
      MOVE    'CPU  PASSE' TO £TEXT
      MOVE TRUE TO £MONTOUR
    END-IF
  END-IF
  MOVE £BLK(*,*) TO £AFF(2:9,2:9)
END-REPEAT
***********************
DEFINE SUBROUTINE CONTROLES
*** TEST POSITION CURSEUR ***
IF FRAC(£CUR-COL) NE 0 OR
    £CUR-LIG < 1 OR £CUR-LIG > 8 OR
    £CUR-COL < 1 OR £CUR-COL > 8
  ESCAPE ROUTINE
END-IF
COMPUTE £LIG = £CUR-LIG
COMPUTE £COL = £CUR-COL
*** TEST SI POSIT SUR POINT ***
IF £BLK(£LIG,£COL) NE '.'
  ESCAPE ROUTINE
END-IF
*** TEST SURROUNDING ***
IF £MONTOUR
  MOVE 'O' TO £ADV
  MOVE 'X' TO £MOI
ELSE
  MOVE 'X' TO £ADV
  MOVE 'O' TO £MOI
END-IF
*
* C D E
* A X B
* F G H
*
MOVE FALSE TO £TROUVE-BOOL
RESET £DIR £PION-CUM
DECIDE FOR EVERY CONDITION
  WHEN £AFF(£LIG + 1,£COL)     = £ADV
    MOVE 'A' TO £DIR
    PERFORM OPPOSITION
  WHEN £AFF(£LIG + 1,£COL + 2)     = £ADV
    MOVE 'B' TO £DIR
    PERFORM OPPOSITION
  WHEN £AFF(£LIG,£COL) = £ADV
    MOVE 'C' TO £DIR
    PERFORM OPPOSITION
  WHEN £AFF(£LIG,£COL + 1)     = £ADV
    MOVE 'D' TO £DIR
    PERFORM OPPOSITION
  WHEN £AFF(£LIG,£COL + 2) = £ADV
    MOVE 'E' TO £DIR
    PERFORM OPPOSITION
  WHEN £AFF(£LIG + 2,£COL) = £ADV
    MOVE 'F' TO £DIR
    PERFORM OPPOSITION
  WHEN £AFF(£LIG + 2,£COL + 1)     = £ADV
    MOVE 'G' TO £DIR
    PERFORM OPPOSITION
  WHEN £AFF(£LIG + 2,£COL + 2) = £ADV
    MOVE 'H' TO £DIR
    PERFORM OPPOSITION
  WHEN NONE
    ESCAPE ROUTINE
END-DECIDE
IF NOT £TROUVE-BOOL
  ESCAPE ROUTINE /* PAS D'OPPOSITION
END-IF
*** CONTROLES REUSSIS ***
MOVE TRUE TO £POSIT-BOOL
END-SUBROUTINE
*
* C D E
* A X B
* F G H
*
DEFINE SUBROUTINE OPPOSITION
RESET £PION
MOVE £BLK(*,*) TO £SAV(*,*)
MOVE FALSE TO £CERNEE-BOOL
DECIDE FOR FIRST CONDITION
  WHEN £DIR = 'A'
    COMPUTE £J = £COL - 1
    MOVE £LIG TO £LG
    FOR £CO = £J TO 1 STEP -1
      PERFORM COMPTER-PION
      IF £PION = 0 OR £CERNEE-BOOL
        ESCAPE BOTTOM
      END-IF
    END-FOR
  WHEN £DIR = 'B'
    COMPUTE £J = £COL + 1
    MOVE £LIG TO £LG
    FOR £CO = £J TO 8
      PERFORM COMPTER-PION
      IF £PION = 0 OR £CERNEE-BOOL
        ESCAPE BOTTOM
      END-IF
    END-FOR
  WHEN £DIR = 'C'
    COMPUTE £J  = £LIG - 1
    MOVE £COL TO £CO
    FOR £LG = £J TO 1 STEP -1
      SUBTRACT 1 FROM £CO
      PERFORM COMPTER-PION
      IF £PION = 0 OR £CERNEE-BOOL
        ESCAPE BOTTOM
      END-IF
    END-FOR
  WHEN £DIR = 'D'
    COMPUTE £J = £LIG - 1
    MOVE £COL TO £CO
    FOR £LG = £J TO 1 STEP -1
      PERFORM COMPTER-PION
      IF £PION = 0 OR £CERNEE-BOOL
        ESCAPE BOTTOM
      END-IF
    END-FOR
  WHEN £DIR = 'E'
    COMPUTE £J = £LIG - 1
    MOVE £COL TO £CO
    FOR £LG = £J TO 1 STEP -1
      ADD 1 TO £CO
      PERFORM COMPTER-PION
      IF £PION = 0 OR £CERNEE-BOOL
        ESCAPE BOTTOM
      END-IF
    END-FOR
  WHEN £DIR = 'F'
    COMPUTE £J = £LIG + 1
    MOVE £COL TO £CO
    FOR £LG = £J TO 8
      SUBTRACT  1 FROM £CO
      PERFORM COMPTER-PION
      IF £PION = 0 OR £CERNEE-BOOL
        ESCAPE BOTTOM
      END-IF
    END-FOR
  WHEN £DIR = 'G'
    COMPUTE £J = £LIG + 1
    MOVE £COL TO £CO
    FOR £LG = £J TO 8
      PERFORM COMPTER-PION
      IF £PION = 0 OR £CERNEE-BOOL
        ESCAPE BOTTOM
      END-IF
    END-FOR
  WHEN £DIR = 'H'
    COMPUTE £J = £LIG + 1
    MOVE £COL TO £CO
    FOR £LG = £J TO 8
      ADD  1 TO £CO
      PERFORM COMPTER-PION
      IF £PION = 0 OR £CERNEE-BOOL
        ESCAPE BOTTOM
      END-IF
    END-FOR
  WHEN NONE IGNORE
END-DECIDE
IF £CERNEE-BOOL
  ADD £PION TO £PION-CUM
  IF £AFFICH-BOOL
    PERFORM AFFICHER
    MOVE £MOI      TO £SAV(£LIG,£COL)
    MOVE £SAV(*,*) TO £BLK(*,*)
  END-IF
END-IF
END-SUBROUTINE
DEFINE SUBROUTINE COMPTER-PION
DECIDE FOR FIRST CONDITION
  WHEN £CO = 0 OR £CO = 9
    RESET £PION /* PAS D'OPPOSITION
  WHEN £BLK(£LG,£CO) = £ADV
    ADD 1 TO £PION
    IF £AFFICH-BOOL
      MOVE £MOI TO £SAV(£LG,£CO)
    END-IF
  WHEN £BLK(£LG,£CO) = £MOI
    MOVE TRUE TO £CERNEE-BOOL
    MOVE TRUE TO £TROUVE-BOOL
  WHEN NONE
    RESET £PION /* PAS D'OPPOSITION
END-DECIDE
END-SUBROUTINE
DEFINE SUBROUTINE AFFICHER
SET CONTROL 'N'
MOVE £MOI TO £BLK(£LIG,£COL)
MOVE £BLK(*,*) TO £AFF(2:9,2:9)
INPUT USING MAP 'OXO-M'
SET CONTROL 'N'
MOVE '.' TO £BLK(£LIG,£COL)
MOVE £BLK(*,*) TO £AFF(2:9,2:9)
INPUT USING MAP 'OXO-M'
END-SUBROUTINE
* * * * * * * * * * *
ON ERROR
  WRITE 'ERROR' £DIR £LG £CO
END-ERROR
*
END
